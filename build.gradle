plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'maven-publish'
}

group 'SSB-AcidIslands'
version = "2024.1"

project.ext {
    targetFolder = file("target/")
    buildVersion = System.getenv("BUILD_NUMBER") == null || Boolean.parseBoolean(System.getenv("STABLE_BUILD")) ?
            version : version + "-b" + System.getenv("BUILD_NUMBER")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(8))
        }
    }

    repositories {
        maven { url 'https://repo.bg-software.com/repository/nms/' }
        maven { url 'https://repo.bg-software.com/repository/api/' }
    }

    build {
        dependsOn shadowJar
    }
}

subprojects {
    shadowJar {
        archiveFileName = "${project.name}.jar"
        destinationDirectory = rootProject.targetFolder
    }
}

dependencies {
    compileOnly "org.spigotmc:v1_8_R3-Taco:latest"
    compileOnly "com.bgsoftware:SuperiorSkyblockAPI:2023.1"
    compileOnly project("Generator")
}

processResources {
    outputs.upToDateWhen { false }
    eachFile { details ->
        if (details.name.contentEquals('plugin.yml')) {
            filter { String line ->
                line.replace('${project.version}', rootProject.buildVersion)
            }
        }
    }
}

shadowJar {
    dependsOn(jar)

    archiveFileName = rootProject.name + "-" + rootProject.buildVersion + ".jar"

    delete fileTree(rootProject.targetFolder.getAbsolutePath())

    destinationDirectory = rootProject.targetFolder
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

task zipArtifacts(type: Zip){
    archiveFileName = rootProject.name + "-" + rootProject.buildVersion + ".zip"
    destinationDirectory = rootProject.targetFolder
    from files(rootProject.targetFolder) {
        include '**/*.jar'
    }
}

build {
    dependsOn shadowJar
    dependsOn zipArtifacts
}

publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build
build.shouldRunAfter subprojects.build
